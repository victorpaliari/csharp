# 30/08/23 - Não teve entrega de atividades pois criamos o novo repositório do Projeto Integrador - Conta Bancária. 

Abaixo segue o que vimos dia 30/08/2023:

- PITCH
    
    PITCH DIARIO A PARTIR DE SEGUNDA-FEIRA - 04/09
    
- Métodos
    
    São funções que programamos para compactar ações em “blocos” e assim poder usar esse método várias vezes. 
    
    Cada método deve realizar apenas uma tarefa;
    
    Deve ser declarado com verbos iniciados com letra maiúscula; Exemplo: Parar(), Andar(), AdicionarAoCarrinho();
    
    Sintaxe de declaração de métodos: 
    
    ```csharp
    [modificador de acesso] [modificador Non-Access] tipo nome(argumentos) {
    corpo do método
    }
    ```
    
    - Modificador de acesso;
    - Modificador Non-Access
    - Tipo;
    - Nome;
    - Argumento;
        
        ```csharp
        static int Somar(int s1, int s2) {
        return s1 + s2;
        }
        ```
        
        > esse método retorna um valor pela função return.
        > 
        
        ```csharp
        namespace metodos_01
        {
            internal class Program
            {
                static void Main(string[] args)
                {
                    int resultado;
        
                    resultado = Somar(2, 2);
        
                    Console.WriteLine("O Resultado da soma é: " + resultado);
                }
        
                static int Somar(int numero1, int numero2)
                {
                    return numero1 + numero2;
                }
        
            }
        }
        ```
        
        > esse método não retorna um valor;
        > 
        
        ```csharp
        namespace Metodos_02
        {
            internal class Program
            {
                static void Main(string[] args)
                {
                    MetodoPublico();
                    MetodoInternal();
                    MetodoPrivado();
                    MetodoProtegido();
                    Class1.MetodoPublico();
                    Class1.MetodoInternal();
                    //metodo protegido só é acessado se houver relação de herança
                    Class1.MetodoProtegido();
                    //método privado só funciona dentro da classe onde ele foi criado
                    Class1.MetodoPrivado();
                }
        
                public static void MetodoPublico()
                {
                    Console.WriteLine($"Metodo Publico - Classe Program");
                }
        
                internal static void MetodoInternal()
                {
                    Console.WriteLine($"Metodo Internal - Classe Program");
                }
        
                protected static void MetodoProtegido()
                {
                    Console.WriteLine($"Metodo Protegido - Classe Program");
                }
        
                private static void MetodoPrivado ()
                {
                    Console.WriteLine($"Metodo Privado - Classe Program");
                }
            }
        }
        ```
        
        ## *Namespace separa classes por ações*
        
        metodo public: acessa de qualquer lugar;
        
        private: o mais fechado de todos, só funciona dentro da própria classe;
        
        protegido: dá pra usar na própria classe que foi criada ou se a classe herda de outra classe;
        
        internal: só funciona dentro do próprio projeto;
        
        private static ConsoleKeyInfo consoleKeyInfo; // verifica a tecla que o usuario digitou